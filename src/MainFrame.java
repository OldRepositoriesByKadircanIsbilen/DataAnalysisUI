
import java.awt.Color;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JComboBox;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author COG
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cmbGender = new javax.swing.JComboBox<>();
        cmbPolyuria = new javax.swing.JComboBox<>();
        cmbPolydipsia = new javax.swing.JComboBox<>();
        cmbSudden = new javax.swing.JComboBox<>();
        cmbWeakness = new javax.swing.JComboBox<>();
        cmbPolyphagia = new javax.swing.JComboBox<>();
        cmbGenital = new javax.swing.JComboBox<>();
        cmbVisual = new javax.swing.JComboBox<>();
        cmbItching = new javax.swing.JComboBox<>();
        cmbIrritability = new javax.swing.JComboBox<>();
        cmbDelayed = new javax.swing.JComboBox<>();
        cmbPartial = new javax.swing.JComboBox<>();
        cmbMuscle = new javax.swing.JComboBox<>();
        cmbAlopecia = new javax.swing.JComboBox<>();
        cmbObesity = new javax.swing.JComboBox<>();
        pnlAlgorithm = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAlgorithm = new javax.swing.JTextArea();
        btnApply = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        lblResult = new javax.swing.JLabel();
        cmbAge = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Karar Destek Yazılımı"));

        jLabel1.setText("Age :");

        jLabel2.setText("Gender :");

        jLabel3.setText("Polyuria :");

        jLabel4.setText("Polydipsia :");

        jLabel5.setText("Sudden weight loss :");

        jLabel6.setText("Weakness :");

        jLabel7.setText("Polyphagia :");

        jLabel8.setText("Genital thrush :");

        jLabel9.setText("Visual blurring :");

        jLabel10.setText("Itching :");

        jLabel11.setText("Irritability :");

        jLabel12.setText("Delayed healing :");

        jLabel13.setText("Partial paresis :");

        jLabel14.setText("Muscle stiffness :");

        jLabel15.setText("Alopecia :");

        jLabel16.setText("Obesity :");

        cmbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female", "Male" }));

        cmbPolyuria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbPolydipsia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbSudden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbWeakness.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbPolyphagia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbGenital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        cmbGenital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGenitalActionPerformed(evt);
            }
        });

        cmbVisual.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbItching.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbIrritability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbDelayed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbPartial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbMuscle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbAlopecia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        cmbObesity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        pnlAlgorithm.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithm"));

        txtAlgorithm.setColumns(20);
        txtAlgorithm.setRows(5);
        jScrollPane2.setViewportView(txtAlgorithm);

        javax.swing.GroupLayout pnlAlgorithmLayout = new javax.swing.GroupLayout(pnlAlgorithm);
        pnlAlgorithm.setLayout(pnlAlgorithmLayout);
        pnlAlgorithmLayout.setHorizontalGroup(
            pnlAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlgorithmLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlAlgorithmLayout.setVerticalGroup(
            pnlAlgorithmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        btnApply.setText("Apply Algorithm");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        jLabel17.setText("Result: ");

        lblResult.setBackground(java.awt.Color.white);
        lblResult.setText(" ");
        lblResult.setToolTipText("");
        lblResult.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblResult.setName("lblResult"); // NOI18N

        cmbAge.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        cmbAge.setSelectedIndex(34);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPolyuria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPolydipsia, 0, 102, Short.MAX_VALUE)
                            .addComponent(cmbSudden, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbWeakness, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPolyphagia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbGenital, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbVisual, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbItching, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbIrritability, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbDelayed, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPartial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbMuscle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbObesity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbAlopecia, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAge, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(542, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlAlgorithm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbPolyuria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cmbPolydipsia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbSudden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbWeakness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cmbPolyphagia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cmbGenital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cmbVisual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cmbItching, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbIrritability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(cmbDelayed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(cmbPartial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(cmbMuscle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(cmbAlopecia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(cmbObesity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnApply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbGenitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGenitalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbGenitalActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        
        HashMap<String,JComboBox> hm = new HashMap<>();
        hm.put("Age",cmbAge);
        hm.put("Gender",cmbGender);
        hm.put("Polyuria",cmbPolyuria);
        hm.put("Polydipsia",cmbPolydipsia);
        hm.put("Sudden weight loss",cmbSudden);
        hm.put("Weakness",cmbWeakness);
        hm.put("Polyphagia",cmbPolyphagia);
        hm.put("Genital thrush",cmbGenital);
        hm.put("visual blurring",cmbVisual);
        hm.put("Itching",cmbItching);
        hm.put("Irritability",cmbIrritability);
        hm.put("delayed healing",cmbDelayed);
        hm.put("Partial Paresis",cmbPartial);
        hm.put("Muscle Stiffness",cmbMuscle);
        hm.put("Alopecia",cmbAlopecia);
        hm.put("Obesity",cmbObesity);
        
        ArrayList<String> algo = new ArrayList<>();
        try{
            algo = readAlgo("Decision_Tree.txt");
        }catch(Exception e){
        }
        
        ArrayList<String> algo2 = (ArrayList<String>)algo.clone();
        boolean check = true;
        
        String algtext = "";
        while(check){
            if(algo2.get(0).startsWith("Age")){
                if(algo2.size()==1){
                    String output = algo2.get(0).split(": ")[1];
                    String[] outs = output.split(" ");
                    String diab = outs[0];
                    int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                    int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                    String perc = "%";
                    if(diab.startsWith("Po")){
                        perc += (100*posit/(posit+negat));
                    }else if(diab.startsWith("Ne")){
                        perc += (100*negat/(posit+negat));
                    }        
                    lblResult.setText(diab+" ("+perc+")");
                    if(output.startsWith("Po")){
                        lblResult.setForeground(Color.green);
                    }else if(output.startsWith("Ne")){
                        lblResult.setForeground(Color.red);
                    }else{
                        lblResult.setForeground(Color.black);
                    }
                    check=false;
                    algtext += "\n"+algo2.get(0);
                }else if(algo2.size()==2){
                    String[] pars = algo2.get(0).split(" ");
                    String[] pars2 = algo2.get(1).split(" ");
                    String par = pars[0];
                    String sym = pars[1];
                    String sym2 = pars2[1];
                    String thr = pars[2];
                    double dthr = Double.parseDouble(thr.split(":")[0]);
                    
                    String val = hm.get(par).getSelectedItem().toString();
                    double dval = Double.parseDouble(val);
                    
                    if(sym.equals(">") && dval > dthr){
                        String output = algo2.get(0).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        check=false;
                        algtext += "\n"+algo2.get(0);
                    }else if(sym.equals("≤") && dval <= dthr){
                        String output = algo2.get(0).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        algtext += "\n"+algo2.get(0);
                    }else if(sym2.equals(">") && dval > dthr){
                        String output = algo2.get(1).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        algtext += "\n"+algo2.get(1);
                    }else if(sym2.equals("≤") && dval <= dthr){
                        String output = algo2.get(1).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        algtext += "\n"+algo2.get(1);
                    }else{
                        lblResult.setText("ERROR");
                        check=false;
                        algtext += "\nERROR";
                    }
                }else{
                
                    String[] pars = algo2.get(0).split(" ");
                    String par = pars[0];
                    String sym = pars[1];
                    String thr = pars[2];
                    double dthr = Double.parseDouble(thr.split(":")[0]);
                    
                    String val = hm.get(par).getSelectedItem().toString();
                    double dval = Double.parseDouble(val);
                    
                    String s2 = "";
                    ArrayList<String> algo3 = new ArrayList<>();

                    int pos = -1;

                    for(int i=0;i<algo2.size();i++){
                        pars = algo2.get(i).split(" ");
                        sym = pars[1];
                        
                        if((sym.equals(">") && dval > dthr) || (sym.equals("≤") && dval <= dthr)){
                            pos = i + 1;
                            algtext += "\n"+algo2.get(i);
                            break;
                        }
                    }

                    for(int i=pos;i<algo2.size();i++){
                        if(algo2.get(i).startsWith(par)){
                            break;
                        }
                        if(algo2.get(i).startsWith("|")){
                            algo3.add(algo2.get(i).substring(4));
                        }
                    }

                    if(algo3.isEmpty()){
                        String output = algo2.get(pos-1).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        //algtext += "\n"+algo2.get(pos-1);
                    }else{
                        algo2 = (ArrayList<String>)algo3.clone();
                    }
                }
                
            }else{
                if(algo2.size()==1){
                    String output = algo2.get(0).split(": ")[1];
                    String[] outs = output.split(" ");
                    String diab = outs[0];
                    int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                    int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                    String perc = "%";
                    if(diab.startsWith("Po")){
                        perc += (100*posit/(posit+negat));
                    }else if(diab.startsWith("Ne")){
                        perc += (100*negat/(posit+negat));
                    }        
                    lblResult.setText(diab+" ("+perc+")");
                    if(output.startsWith("Po")){
                        lblResult.setForeground(Color.green);
                    }else if(output.startsWith("Ne")){
                        lblResult.setForeground(Color.red);
                    }else{
                        lblResult.setForeground(Color.black);
                    }
                        
                    check=false;
                    algtext += "\n"+algo2.get(0);
                }else if(algo2.size()==2){
                    String[] pars = algo2.get(0).split(" = ");
                    String par = pars[0];
                    String val = hm.get(par).getSelectedItem().toString();
                    if(algo2.get(0).startsWith(par+" = "+val)){
                        String output = algo2.get(0).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        algtext += "\n"+algo2.get(0);
                    }else if(algo2.get(1).startsWith(par+" = "+val)){
                        String output = algo2.get(1).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        algtext += "\n"+algo2.get(1);
                    }else{
                        lblResult.setText("ERROR");
                        check=false;
                        algtext += "\nERROR";
                    }
                }else{
                
                    String[] pars = algo2.get(0).split(" = ");
                    String par = pars[0];

                    String val = hm.get(par).getSelectedItem().toString();

                    String s2 = "";
                    ArrayList<String> algo3 = new ArrayList<>();

                    int pos = -1;

                    for(int i=0;i<algo2.size();i++){
                        if(algo2.get(i).startsWith(par+" = "+val)){
                            pos = i + 1;
                            algtext += "\n"+algo2.get(i);
                            break;
                        }
                    }

                    for(int i=pos;i<algo2.size();i++){
                        if(algo2.get(i).startsWith(par)){
                            break;
                        }
                        if(algo2.get(i).startsWith("|")){
                            algo3.add(algo2.get(i).substring(4));
                        }
                    }

                    if(algo3.isEmpty()){
                        String output = algo2.get(pos-1).split(": ")[1];
                        String[] outs = output.split(" ");
                        String diab = outs[0];
                        int posit = Integer.parseInt(outs[1].split("=")[1].split(",")[0]);
                        int negat = Integer.parseInt(outs[2].split("=")[1].split("}")[0]);
                        String perc = "%";
                        if(diab.startsWith("Po")){
                            perc += (100*posit/(posit+negat));
                        }else if(diab.startsWith("Ne")){
                            perc += (100*negat/(posit+negat));
                        }        
                        lblResult.setText(diab+" ("+perc+")");
                        if(output.startsWith("Po")){
                            lblResult.setForeground(Color.green);
                        }else if(output.startsWith("Ne")){
                            lblResult.setForeground(Color.red);
                        }else{
                            lblResult.setForeground(Color.black);
                        }
                        
                        check=false;
                        //algtext += "\n"+algo2.get(pos-1);
                    }else{
                        algo2 = (ArrayList<String>)algo3.clone();
                    }
                }
            }
            
        }
        txtAlgorithm.setText(algtext);
    }//GEN-LAST:event_btnApplyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    public static ArrayList<String> readAlgo(String fn) throws Exception{
        ArrayList<String> algo = new ArrayList<>();
        BufferedReader br = new BufferedReader(new FileReader(fn));
        String s = "";
        
        while((s=br.readLine())!=null){
            algo.add(s);
        }
        return(algo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JComboBox<String> cmbAge;
    private javax.swing.JComboBox<String> cmbAlopecia;
    private javax.swing.JComboBox<String> cmbDelayed;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbGenital;
    private javax.swing.JComboBox<String> cmbIrritability;
    private javax.swing.JComboBox<String> cmbItching;
    private javax.swing.JComboBox<String> cmbMuscle;
    private javax.swing.JComboBox<String> cmbObesity;
    private javax.swing.JComboBox<String> cmbPartial;
    private javax.swing.JComboBox<String> cmbPolydipsia;
    private javax.swing.JComboBox<String> cmbPolyphagia;
    private javax.swing.JComboBox<String> cmbPolyuria;
    private javax.swing.JComboBox<String> cmbSudden;
    private javax.swing.JComboBox<String> cmbVisual;
    private javax.swing.JComboBox<String> cmbWeakness;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblResult;
    private javax.swing.JPanel pnlAlgorithm;
    private javax.swing.JTextArea txtAlgorithm;
    // End of variables declaration//GEN-END:variables
}
